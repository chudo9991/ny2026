#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ AR –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
BOT_USERNAME = os.getenv('BOT_USERNAME', 'simple_test_clvb2_bot')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://45.144.30.194:9443/')

# –ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
NEW_YEAR_GREETING = """
üéÑüéÖüéâ **–° –ù–û–í–´–ú –ì–û–î–û–ú!** üéâüéÖüéÑ

–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! 

–ü—É—Å—Ç—å —ç—Ç–æ—Ç –Ω–æ–≤—ã–π –≥–æ–¥ –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º:
‚ú® –ú–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è
üåü –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∂–µ–ª–∞–Ω–∏–π  
üéÅ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–∏
üí´ –ó–¥–æ—Ä–æ–≤—å–µ, –ª—é–±–æ–≤—å –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ

–ê –ø–æ–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –º–∏—Ä –Ω–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞ —Å –Ω–∞—à–µ–π AR-–µ–ª–∫–æ–π! 

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üéÑ‚ú®
"""

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton(
            "üéÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å AR-–µ–ª–∫—É", 
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        NEW_YEAR_GREETING,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton(
            "üéÑ –û—Ç–∫—Ä—ã—Ç—å AR-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéÑ –•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –µ–ª–∫—É –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏?\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!",
        reply_markup=reply_markup
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @{BOT_USERNAME}")
    logger.info(f"WebApp URL: {WEBAPP_URL}")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
